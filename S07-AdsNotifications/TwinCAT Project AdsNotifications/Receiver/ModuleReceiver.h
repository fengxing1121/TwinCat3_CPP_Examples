///////////////////////////////////////////////////////////////////////////////
// ModuleReceiver.h
#pragma once

#include "ReceiverInterfaces.h"
#include "AdsR0.h"

// parameter ids for TwinCAT module ModuleReceiver with disabled code generation
// could be moved to ReceiverServices.h
const PTCID PID_ModuleReceiverAdsPort        = 0x00000002;

//sample specific invokeids
//please implement own handling of invokeids!
const ULONG NOTSAMPLE_INVOKEID_GETHDL_MAINPLCVAR			= 0x00000001;
const ULONG NOTSAMPLE_INVOKEID_ADDNOTIFICATION_MAINPLCVAR	= 0x00000002;
const ULONG NOTSAMPLE_INVOKEID_DELNOTIFICATION_MAINPLCVAR	= 0x00000003;
const ULONG NOTSAMPLE_INVOKEID_RELEASEHDL_MAINPLCVAR		= 0x00000004;



class CModuleReceiver 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
	, public CAdsR0FifoPort
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_ReceiverCModuleReceiver)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CModuleReceiver();
	virtual	~CModuleReceiver();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

	// sample specific CAds methods
	virtual	void	AdsReadWriteCon( AmsAddr& rAddr, ULONG invokeId, ULONG nResult, ULONG cbLength, PVOID pData );
	virtual  void	AdsAddDeviceNotificationCon( AmsAddr& rAddr, ULONG invokeId, ULONG nResult, ULONG handle);
	virtual	void	AdsDeviceNotificationInd( AmsAddr& rAddr, ULONG invokeId, ULONG cbLength, AdsNotificationStream* pNotifications );
	virtual	void	AdsDelDeviceNotificationCon( AmsAddr& rAddr, ULONG invokeId, ULONG nResult );
	virtual	void	AdsWriteCon( AmsAddr& rAddr, ULONG invokeId, ULONG nResult );

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	WORD m_DefaultAdsPort;
	WORD m_ContextAdsPort;
	ULONG m_Counter;
	ModuleReceiverInputs m_Inputs;
	ModuleReceiverOutputs m_Outputs;
	ModuleReceiverAdsCommuncationDataArea m_AdsCommuncationDataArea;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	void SubmitAdsReadReq();
	enum 
	{
		invokeIdReadByOidAndPid = 1
	};
	ULONG  m_ReadByOidAndPid;

	AmsAddr                m_Addr; 
};
