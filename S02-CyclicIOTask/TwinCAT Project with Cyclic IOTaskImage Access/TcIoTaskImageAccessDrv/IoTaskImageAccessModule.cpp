///////////////////////////////////////////////////////////////////////////////
// IoTaskImageAccessModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "IoTaskImageAccessModule.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CIoTaskImageAccessModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CIoTaskImageAccessModule
BEGIN_INTERFACE_MAP(CIoTaskImageAccessModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CIoTaskImageAccessModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CIoTaskImageAccessModule)
IMPLEMENT_ITCADI(CIoTaskImageAccessModule)
IMPLEMENT_ITCWATCHSOURCE(CIoTaskImageAccessModule)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CIoTaskImageAccessModule 
BEGIN_SETOBJPARA_MAP(CIoTaskImageAccessModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_IoTaskImageAccessModuleIoTaskImage, m_spIoTaskImage)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CIoTaskImageAccessModule 
BEGIN_GETOBJPARA_MAP(CIoTaskImageAccessModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_IoTaskImageAccessModuleIoTaskImage, m_spIoTaskImage)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CIoTaskImageAccessModule
BEGIN_OBJPARAWATCH_MAP(CIoTaskImageAccessModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CIoTaskImageAccessModule
BEGIN_OBJDATAAREA_MAP(CIoTaskImageAccessModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
//sample code: added 	
// m_pValues(NULL), m_nValues(0), m_pCheckResults(NULL), m_nCheckResults(0)
//sample code end
CIoTaskImageAccessModule::CIoTaskImageAccessModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
	, m_pValues(NULL)
	, m_nValues(0)
	, m_pCheckResults(NULL)
	, m_nCheckResults(0)
{
}

///////////////////////////////////////////////////////////////////////////////
CIoTaskImageAccessModule::~CIoTaskImageAccessModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CIoTaskImageAccessModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CIoTaskImageAccessModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CIoTaskImageAccessModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization

	// sample code
	hr = FAILED(hr) ? hr : InitIoTaskImage();
	hr = FAILED(hr) ? hr : InitPointerToDataArea(ADI_I, m_nValues, m_pValues);
	hr = FAILED(hr) ? hr : InitPointerToDataArea(ADI_O, m_nCheckResults, m_pCheckResults);
	hr = FAILED(hr) ? hr : CheckParameter();
	// sample code end
	
	// If following call is successful the CycleUpdate method will be called, 
	// eventually even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		//sample code
		DeinitPointerToDataArea(m_nCheckResults, m_pCheckResults);
		DeinitPointerToDataArea(m_nValues, m_pValues); 
		DeinitIoTaskImage();
		RemoveModuleFromCaller(); 
		//sample code end
	}


	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CIoTaskImageAccessModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 
	
	//sample code
	DeinitPointerToDataArea(m_nValues, m_pValues); 
	DeinitPointerToDataArea(m_nCheckResults, m_pCheckResults);
	DeinitIoTaskImage();
	//sample code end
	
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CIoTaskImageAccessModule::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CIoTaskImageAccessModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// TODO: Add your cyclic code here
	m_counter++;

	//sample code
	if (m_pValues != NULL)
	{
		// initialization ensures that length of input and output vars is equal (m_nValues and m_nCheckResults)

		// iterate over all input values
		for (ULONG idx=0; idx<m_nValues; ++idx)
		{
			//and set output accordingly 
			m_pCheckResults[idx] = CheckValue(m_pValues[idx]);
		}
	}
	//sample code end

	return hr;
}
///</AutoGeneratedContent>





//sample code 
//added methods
///////////////////////////////////////////////////////////////////////////////

// called by CycleUpdate 
// determines the output value in relation to input value
///////////////////////////////////////////////////////////////////////////////
BYTE CIoTaskImageAccessModule::CheckValue(FLOAT Value)
{
	if (Value<0)
	{
		return 1; 
	}
	else if (Value>0)
	{
		return 2;
	}
	else 
	{
		return 3;
	}
}

///////////////////////////////////////////////////////////////////////////////
//adds the module to be called cyclically
HRESULT CIoTaskImageAccessModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
//stopps the module to be called cyclically
VOID CIoTaskImageAccessModule::RemoveModuleFromCaller()
{
	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
}

///////////////////////////////////////////////////////////////////////////////
// initialise the taskimage connection
HRESULT CIoTaskImageAccessModule::InitIoTaskImage()
{
	HRESULT hr = S_OK;
	if ( m_spIoTaskImage.HasOID() )
	{
		SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spIoTaskImage));
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for IoTaskImage");
	}
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// clean up the taskimage connection
VOID CIoTaskImageAccessModule::DeinitIoTaskImage()
{
	if ( m_spIoTaskImage )
	{
		m_spIoTaskImage	= NULL;
	}
}

///////////////////////////////////////////////////////////////////////////////
//get number of elements and pointer to areaNo (input/output-area)
template<typename T>
HRESULT CIoTaskImageAccessModule::InitPointerToDataArea
(
	UINT areaNo, 
	UINT& nElements,
	T*& pElements
)
{
	HRESULT hr = S_OK;
	if (m_spIoTaskImage != NULL)
	{
		UINT cbElements = 0;
		if (SUCCEEDED_DBG(hr = m_spIoTaskImage->GetImageSize(areaNo, &cbElements)))
		{
			nElements = cbElements/sizeof(*pElements);
			if (nElements>0)
			{
				hr = m_spIoTaskImage->GetImagePtr(cbElements, 0, areaNo, reinterpret_cast<PPVOID>(&pElements));
			}
		}
	}
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
//clean up pointer to areaNo (input/output-area)
template<typename T>
VOID CIoTaskImageAccessModule::DeinitPointerToDataArea(UINT& nElements, T*& pElements)
{
	if ((m_spIoTaskImage != NULL))
	{
		if (pElements != NULL)
		{
			m_spIoTaskImage->ReleaseImagePtr(pElements); 
			pElements = NULL;
			nElements = 0;
		}
	}
}

///////////////////////////////////////////////////////////////////////////////
//check (on SetObjStateSO) if number of input == number of output
HRESULT CIoTaskImageAccessModule::CheckParameter()
{
	HRESULT hr = S_OK;

	//Expecting as much in as out variables! 
	if (m_nValues != m_nCheckResults)
	{
		hr = ADS_E_INVALIDPARM;
		m_Trace.Log(tlError, FLEAVEA "hr=0x%08x:", hr, m_nCheckResults, m_nValues);
	} 

	return hr;
}
//sample code end
