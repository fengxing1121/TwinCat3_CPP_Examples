///////////////////////////////////////////////////////////////////////////////
// IoTaskImageAccessModule.h
#pragma once

#include "TcIoTaskImageAccessDrvInterfaces.h"

class CIoTaskImageAccessModule 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_TcIoTaskImageAccessDrvCIoTaskImageAccessModule)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CIoTaskImageAccessModule();
	virtual	~CIoTaskImageAccessModule();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
	ITcADIPtr m_spIoTaskImage;
///</AutoGeneratedContent>
	//sample code
	HRESULT InitIoTaskImage();
	VOID DeinitIoTaskImage();

	template<typename T>
	HRESULT InitPointerToDataArea(UINT areaNo, UINT& nElements, T*& pElements);
	template<typename T>
	VOID DeinitPointerToDataArea(UINT& nElements, T*& pElements);

	BYTE CheckValue(FLOAT Value);
	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	HRESULT CheckParameter(); 
	//sample code end

	
	// Tracing
	CTcTrace m_Trace;



	// TODO: Custom variable
	UINT m_counter;
	//sample code
	PFLOAT m_pValues;
	UINT  m_nValues;
	PBYTE m_pCheckResults;
	UINT  m_nCheckResults;
	//sample code end

};
