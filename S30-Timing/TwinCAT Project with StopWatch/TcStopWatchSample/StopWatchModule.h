///////////////////////////////////////////////////////////////////////////////
// StopWatchModule.h
#pragma once

#include "TcStopWatchSampleInterfaces.h"
#include "TcRtInterfaces.h"

class CStopWatchModule 
	: public ITComObject
	, public ITcADI
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_TcStopWatchSampleCStopWatchModule)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_OBJDATAAREA_MAP()

	CStopWatchModule();
	virtual	~CStopWatchModule();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();
	double ComputePi(ULONG nCount);

///<AutoGeneratedContent id="Members">
	StopWatchModuleInputs m_Inputs;
	StopWatchModuleOutputs m_Outputs;
	StopWatchModuleInternalResults m_InternalResults;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	// TODO: Custom variable
	UINT m_counter;

	ITcRTimePtr m_spRTime;

	char m_szPentiumTimeStart[64];
	char m_szPentiumTimeStop[64];
	char m_szTaskSysTime[64];
	char m_szTaskDcTime[64];
	char m_szTaskCycleTime[64];
	char m_szTaskCpuAccountForAnotherPi[64];
	char m_szPentiumTimeDiffForPi[64];
};
