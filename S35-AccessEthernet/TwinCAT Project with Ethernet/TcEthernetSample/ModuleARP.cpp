///////////////////////////////////////////////////////////////////////////////
// ModuleARP.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleARP.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

template<typename T> 
T Swap16(T value)
{
	return static_cast<T>(HIBYTE((value)) | (LOBYTE((value)) << 8));
}

template<typename T> 
T Swap32(T value)
{
	return static_cast<T>(Swap16(HIWORD(value)) | Swap16(LOWORD(value)) << 16);
}

///////////////////////////////////////////////////////////////////////////////
// CModuleARP
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleARP
BEGIN_INTERFACE_MAP(CModuleARP)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ITcIoEthProtocol, ITcIoEthProtocol)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CModuleARP)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleARP)
IMPLEMENT_ITCADI(CModuleARP)
IMPLEMENT_ITCWATCHSOURCE(CModuleARP)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleARP 
BEGIN_SETOBJPARA_MAP(CModuleARP)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_ModuleARPSenderIpAddress, m_SenderIpAddress)
	SETOBJPARA_VALUE(PID_ModuleARPTargetIpAddress, m_TargetIpAddress)
	SETOBJPARA_VALUE(PID_ModuleARPArpRequestTimeoutMs, m_ArpRequestTimeoutMs)
	SETOBJPARA_VALUE(PID_ModuleARPMultiCastHardwareAddress, m_MultiCastHardwareAddress)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_ModuleARPEthernetAdapter, m_spEthernetAdapter)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleARP 
BEGIN_GETOBJPARA_MAP(CModuleARP)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_ModuleARPSenderHardwareAddress, m_SenderHardwareAddress)
	GETOBJPARA_VALUE(PID_ModuleARPTargetHardwareAddress, m_TargetHardwareAddress)
	GETOBJPARA_VALUE(PID_ModuleARPSenderIpAddress, m_SenderIpAddress)
	GETOBJPARA_VALUE(PID_ModuleARPTargetIpAddress, m_TargetIpAddress)
	GETOBJPARA_VALUE(PID_ModuleARPArpRequestTimeoutMs, m_ArpRequestTimeoutMs)
	GETOBJPARA_VALUE(PID_ModuleARPMultiCastHardwareAddress, m_MultiCastHardwareAddress)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_ModuleARPEthernetAdapter, m_spEthernetAdapter)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Watch members of CModuleARP
BEGIN_OBJPARAWATCH_MAP(CModuleARP)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	OBJPARAWATCH_VALUE(PID_ModuleARPSenderHardwareAddress, m_SenderHardwareAddress)
	OBJPARAWATCH_VALUE(PID_ModuleARPTargetHardwareAddress, m_TargetHardwareAddress)
	OBJPARAWATCH_VALUE(PID_ModuleARPSenderIpAddress, m_SenderIpAddress)
	OBJPARAWATCH_VALUE(PID_ModuleARPTargetIpAddress, m_TargetIpAddress)
	OBJPARAWATCH_VALUE(PID_ModuleARPArpRequestTimeoutMs, m_ArpRequestTimeoutMs)
	OBJPARAWATCH_VALUE(PID_ModuleARPMultiCastHardwareAddress, m_MultiCastHardwareAddress)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleARP
BEGIN_OBJDATAAREA_MAP(CModuleARP)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(0, m_Inputs)
	OBJDATAAREA_VALUE(1, m_Outputs)
	OBJDATAAREA_VALUE(3, m_Packets)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModuleARP::CModuleARP()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
	, m_idLinkStatusChanged(0)
	, m_ArpRequestState(ArpReqInit)
{
	memset(&m_Inputs, 0, sizeof(m_Inputs)); 
	memset(&m_Outputs, 0, sizeof(m_Outputs)); 
	m_TargetHardwareAddress = NullEthernetAddress;
	m_SenderHardwareAddress = NullEthernetAddress;
	m_MultiCastHardwareAddress = NullEthernetAddress;
}

///////////////////////////////////////////////////////////////////////////////
CModuleARP::~CModuleARP() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleARP)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleARP::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = FAILED(hr) ? hr : m_spSrv->TcQuerySmartObjectInterface(m_spEthernetAdapter);

	if (!IsEqual(m_MultiCastHardwareAddress, NullEthernetAddress))
	{
		hr = FAILED(hr) ? hr : m_spEthernetAdapter->AddMulticastAddr(m_MultiCastHardwareAddress);
		m_Trace.Log(tlInfo, FNAMEA "Added multicast hardware address " ETHERNET_ADDRESS_TYPE_FMTSTRA ", hr=0x%08x",
			ETHERNET_ADDRESS_TYPE_ARGS(m_MultiCastHardwareAddress), hr);
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleARP::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization
	hr = FAILED(hr) ? hr : InitEthernetAdapter();


	// If following call is successful the CycleUpdate method will be called, 
	// eventually even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 
	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		SetObjStateOS();
	}
	else
	{
		// trigger update of link state in CycleUpdate() 
		InterlockedExchangeR0(&m_idLinkStatusChanged, 1);
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleARP::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 
	DeinitEthernetAdapter();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleARP::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	m_spEthernetAdapter = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleARP::InitEthernetAdapter()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	hr = FAILED(hr) ? hr : m_spEthernetAdapter->GetHwMacAddr(&m_SenderHardwareAddress);
	hr = FAILED(hr) ? hr : m_spEthernetAdapter->GetLinkError(&m_Outputs.LinkError);
	if (m_Outputs.LinkError == FALSE)
	{
		hr = FAILED(hr) ? hr : m_spEthernetAdapter->GetLinkSpeed(&m_Outputs.Speed);
	}
	hr = FAILED(hr) ? hr : m_spEthernetAdapter->RegisterProtocol(THIS_CAST(ITcIoEthProtocol));
	if (SUCCEEDED_DBG(hr))
	{
		m_Trace.Log(tlInfo, FNAMEA "m_SenderHardwareAddress = " ETHERNET_ADDRESS_TYPE_FMTSTRA ", LinkError=%d, Speed=%d", 
			ETHERNET_ADDRESS_TYPE_ARGS(m_SenderHardwareAddress), m_Outputs.LinkError, m_Outputs.Speed);
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleARP::DeinitEthernetAdapter()
{
	m_Trace.Log(tlVerbose, FENTERA);
	if (m_spEthernetAdapter != NULL)
	{
		m_spEthernetAdapter->UnregisterProtocol(THIS_CAST(ITcIoEthProtocol));
	}

	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleARP::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleARP::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModuleARP::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	m_counter++;

	// CModuleARP::CheckFrame() will be called in the context of CheckRecvFrames()
	hr = m_spEthernetAdapter->CheckRecvFrames(THIS_CAST(ITcIoEthProtocol));

	BOOL bLinkError = FALSE;
	BOOL bChanged = FALSE;
	hr = UpdateLinkState(bChanged, bLinkError);
	if (SUCCEEDED(hr))
	{
		if (bChanged == TRUE)
		{
			m_Trace.Log(tlInfo, FNAMEA "Reset target hardware address");
			m_TargetHardwareAddress = NullEthernetAddress;
			m_ArpRequestState = ArpReqInit;
			if (bLinkError == FALSE)
			{
				m_ArpRequestState = ArpReqSend;
			}
		}
	}

	if (m_ArpRequestState == ArpReqSend)
	{
		if (SUCCEEDED(SendArpRequest()))
		{
			m_ArpRequestState = ArpReqRecv;
			if (m_ArpRequestTimeoutMs>0)
			{
				m_Trace.Log(tlInfo, FNAMEA "ArpRequestTimeout=%d ms", m_ArpRequestTimeoutMs );
				m_ArpRequestTimeout.Start(m_ArpRequestTimeoutMs);
			}
		}
		else
		{
			m_ArpRequestState =  ArpReqError;
		}
	}

	// check if timeout has elapsed
	if (m_ArpRequestState == ArpReqRecv)
	{
		if (m_ArpRequestTimeoutMs>0)
		{
			if (m_ArpRequestTimeout.IsElapsed())
			{
				m_Trace.Log(tlInfo, FNAMEA "ArpRequestTimeout=%d ms elapsed, retry ...", m_ArpRequestTimeoutMs );
				m_ArpRequestState = ArpReqSend;
			}
		}
	}

	// Process frames which have been sent with low priority and clean up buffers
	m_spEthernetAdapter->ProcessSendFrames(ipTask, context);

	return hr;
}
///</AutoGeneratedContent>

HRESULT CModuleARP::UpdateLinkState(BOOL& bChanged, BOOL& bLinkError)
{
	HRESULT hr = S_OK;
	if (InterlockedExchangeR0(&m_idLinkStatusChanged, 0) == 1)
	{
		hr = m_spEthernetAdapter->GetLinkError(&bLinkError);
		if (FAILED(hr))
		{
			m_Trace.Log(tlWarning, FNAMEA "m_spEthernetAdapter->GetLinkError() failed, hr=0x%08x", hr);
		}
		else
		{
			if (bLinkError == FALSE)
			{
				if (FAILED(m_spEthernetAdapter->GetLinkSpeed(&m_Outputs.Speed)))
				{
					m_Outputs.Speed = 0;
					m_Trace.Log(tlWarning, FNAMEA "m_spEthernetAdapter->GetLinkSpeed() failed, hr=0x%08x", hr);
				}
			}
			else
			{
				m_Outputs.Speed = 0;
			}

			if (m_Outputs.LinkError == bLinkError)
			{
				m_Trace.Log(tlWarning, FNAMEA "bLinkError = %d equal to current value", bLinkError);
			}
			else
			{
				m_Outputs.LinkError = bLinkError;
				m_Trace.Log(tlInfo, FNAMEA "bLinkError = %d, Speed=%d", m_Outputs.LinkError, m_Outputs.Speed);
			}

		}
		bChanged = TRUE;
	}
	else
	{
		bChanged = FALSE;
		bLinkError = m_Outputs.LinkError;
	}
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleARP::SendArpRequest()
{
	HRESULT hr = E_FAIL;

	EthernetFrameArpType& ArpRequest = m_Packets.ArpRequest;
	ULONG IpAddrSender = 0;
	ULONG IpAddrTarget = 0;
	memcpy(&IpAddrSender, &m_SenderIpAddress, sizeof(IpAddrSender));
	memcpy(&IpAddrTarget, &m_TargetIpAddress, sizeof(IpAddrTarget));

	ArpRequest.EthernetFrame.Destination       = BroadcastEthernetAddress;
	ArpRequest.EthernetFrame.Source            = m_SenderHardwareAddress; 
	ArpRequest.EthernetFrame.EtherType         = Swap16(EtherTypeARP1); 
	ArpRequest.ArpPacket.HardwareType          = Swap16(ArpHardwareTypeEthernet);
	ArpRequest.ArpPacket.ProtocolType          = Swap16(EtherTypeIP);
	ArpRequest.ArpPacket.HardwareAddressLength = sizeof(ArpRequest.ArpPacket.SenderHardwareAddress);
	ArpRequest.ArpPacket.ProtocolAddressLength = sizeof(ArpRequest.ArpPacket.SenderProtocolAddress);
	ArpRequest.ArpPacket.Operation             = Swap16(ArpOpRequest);
	ArpRequest.ArpPacket.SenderHardwareAddress = m_SenderHardwareAddress; 
	ArpRequest.ArpPacket.TargetHardwareAddress = BroadcastEthernetAddress;
	ArpRequest.ArpPacket.SenderProtocolAddress = Swap32(IpAddrSender);
	ArpRequest.ArpPacket.TargetProtocolAddress = Swap32(IpAddrTarget);

	// TcEthernetAdapterPriorityLow indicates that frame can be queued for processing
	// TcEthernetAdapterPriorityHigh will process the frame immediately
	hr = m_spEthernetAdapter->SendFrame(TcEthernetAdapterPriorityLow, &ArpRequest, sizeof(ArpRequest));

	if (SUCCEEDED(hr))
	{
		m_Trace.Log(tlInfo, FNAMEA "macSrc = " ETHERNET_ADDRESS_TYPE_FMTSTRA ", ipSrc=0x%08x", 
			ETHERNET_ADDRESS_TYPE_ARGS(ArpRequest.ArpPacket.SenderHardwareAddress), ArpRequest.ArpPacket.SenderProtocolAddress);
		m_Trace.Log(tlInfo, FNAMEA "macDst = " ETHERNET_ADDRESS_TYPE_FMTSTRA ", ipDst=0x%08x", 
			ETHERNET_ADDRESS_TYPE_ARGS(ArpRequest.ArpPacket.TargetHardwareAddress), ArpRequest.ArpPacket.TargetProtocolAddress);
	}
	else
	{
		m_Trace.Log(tlWarning, FNAMEA "m_spEthernetAdapter->SendFrame() failed, hr=0x%08x", hr);
	}
	return hr;
}



///////////////////////////////////////////////////////////////////////////////
///<AutoGeneratedContent id="ImplementationOf_ITcIoEthProtocol">
HRESULT CModuleARP::CheckFrame(PVOID pData, ULONG nData, ULONG nVLanTag, ULONG nTimeStamp)
{
	HRESULT hr = S_FALSE;
	PEthernetFrameType pFrame = (PEthernetFrameType)  pData;
	m_Trace.Log(tlInfo, FNAMEA "pFrame = {FrameType = (0x%04x, %s)" \
		", Src = " ETHERNET_ADDRESS_TYPE_FMTSTRA \
		", Dst = " ETHERNET_ADDRESS_TYPE_FMTSTRA, 
		pFrame->EtherType, GetEtherTypeString(Swap16(pFrame->EtherType)), 
		ETHERNET_ADDRESS_TYPE_ARGS(pFrame->Source), 
		ETHERNET_ADDRESS_TYPE_ARGS(pFrame->Destination));
	switch(Swap16(pFrame->EtherType))
	{
	case EtherTypeARP1:
		{
			PArpPacketType pArpIp = (PArpPacketType)ENDOF(pFrame);
			m_Trace.Log(tlInfo, FNAMEA "pArpIp = {hwAddrSpace=0x%04x, protAddrSpace=%04x, lenHwAddr=%d, lenProtAddr=%d, opcode=%s}", 
				pArpIp->HardwareType, pArpIp->ProtocolType, pArpIp->HardwareAddressLength, pArpIp->ProtocolAddressLength, 
				GetArpOpCodeString(Swap16(pArpIp->Operation)));
			m_Trace.Log(tlInfo, FNAMEA "pArpIp = {macSrc = " ETHERNET_ADDRESS_TYPE_FMTSTRA ", ipSrc=0x%08x", 
				ETHERNET_ADDRESS_TYPE_ARGS(pArpIp->SenderHardwareAddress), pArpIp->SenderProtocolAddress);
			m_Trace.Log(tlInfo, FNAMEA "pArpIp = {macDst = " ETHERNET_ADDRESS_TYPE_FMTSTRA ", ipDst=0x%08x", 
				ETHERNET_ADDRESS_TYPE_ARGS(pArpIp->TargetHardwareAddress), pArpIp->TargetProtocolAddress);

			if (m_ArpRequestState==ArpReqRecv)
			{
				if (pArpIp->Operation == Swap16(ArpOpReply) && IsEqual(pArpIp->TargetHardwareAddress, m_SenderHardwareAddress))
				{
					// Sender hardware address in the reply to my ARP request is the desired target hardware address for given target IP
					m_TargetHardwareAddress = pArpIp->SenderHardwareAddress;
					m_Trace.Log(tlInfo, FNAMEA "m_TargetHardwareAddress = " ETHERNET_ADDRESS_TYPE_FMTSTRA, 
						ETHERNET_ADDRESS_TYPE_ARGS(m_TargetHardwareAddress));
					m_ArpRequestState = ArpReqFinished;
					hr = S_OK;
				}
			}
		}
		break;
	default:
		break;
	}

	// S_OK indicates that processing for this frame is complete
	// S_FALSE indicates that frame should be forwarded 
	return hr;
}

HRESULT CModuleARP::LinkStatusChanged(BOOL bLinkError)
{
	HRESULT hr = S_OK;
	// Method is called in windows context, use Interlocked function to set change status
	InterlockedExchangeR0(&m_idLinkStatusChanged, 1);
	return hr;
}
///</AutoGeneratedContent>
