///////////////////////////////////////////////////////////////////////////////
// ModuleARP.h
#pragma once

#include "TcEthernetSampleInterfaces.h"

class CModuleARP 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public ITcIoEthProtocol
///</AutoGeneratedContent>

{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_TcEthernetSampleCModuleARP)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CModuleARP();
	virtual	~CModuleARP();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcIoEthProtocol
	virtual HRESULT TCOMAPI CheckFrame(PVOID pData, ULONG nData, ULONG nVLanTag, ULONG nTimeStamp);
	virtual HRESULT TCOMAPI LinkStatusChanged(BOOL bLinkError);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT InitEthernetAdapter();
	VOID DeinitEthernetAdapter();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	HRESULT SendArpRequest();
	HRESULT UpdateLinkState(BOOL& bChanged, BOOL& bLink); 

	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	ETHERNET_ADDRESS m_SenderHardwareAddress;
	ETHERNET_ADDRESS m_TargetHardwareAddress;
	IPADDR m_SenderIpAddress;
	IPADDR m_TargetIpAddress;
	ULONG m_ArpRequestTimeoutMs;
	ETHERNET_ADDRESS m_MultiCastHardwareAddress;
	ModuleARPInputs m_Inputs;
	ModuleARPOutputs m_Outputs;
	ModuleARPPackets m_Packets;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
	ITcEthernetAdapterPtr m_spEthernetAdapter;
///</AutoGeneratedContent>

	UINT m_counter;
	ULONG m_idLinkStatusChanged;

	enum ArpRequestState
	{
		ArpReqInit,
		ArpReqSend,
		ArpReqRecv,
		ArpReqError,
		ArpReqFinished
	};
	ArpRequestState m_ArpRequestState;
	CTimeout        m_ArpRequestTimeout;

};
