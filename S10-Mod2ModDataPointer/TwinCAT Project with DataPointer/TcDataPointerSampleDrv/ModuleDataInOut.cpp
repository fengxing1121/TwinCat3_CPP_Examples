///////////////////////////////////////////////////////////////////////////////
// ModuleDataInOut.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleDataInOut.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleDataInOut
BEGIN_INTERFACE_MAP(CModuleDataInOut)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CModuleDataInOut)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleDataInOut)
IMPLEMENT_ITCADI(CModuleDataInOut)
IMPLEMENT_ITCWATCHSOURCE(CModuleDataInOut)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleDataInOut 
BEGIN_SETOBJPARA_MAP(CModuleDataInOut)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleDataInOut 
BEGIN_GETOBJPARA_MAP(CModuleDataInOut)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleDataInOut
BEGIN_OBJPARAWATCH_MAP(CModuleDataInOut)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleDataInOut
BEGIN_OBJDATAAREA_MAP(CModuleDataInOut)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(1, m_InputSource)
	OBJDATAAREA_VALUE(2, m_OutputDestination)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
// Constructor
CModuleDataInOut::CModuleDataInOut()
{
	memset(&m_InputSource, 0, sizeof(m_InputSource)); 
	memset(&m_OutputDestination, 0, sizeof(m_OutputDestination));
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
CModuleDataInOut::~CModuleDataInOut() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleDataInOut)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleDataInOut::SetObjStatePS(PTComInitDataHdr pInitData)
{
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleDataInOut::SetObjStateSO()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleDataInOut::SetObjStateOS()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleDataInOut::SetObjStateSP()
{
	HRESULT hr = S_OK;
	return hr;
}
