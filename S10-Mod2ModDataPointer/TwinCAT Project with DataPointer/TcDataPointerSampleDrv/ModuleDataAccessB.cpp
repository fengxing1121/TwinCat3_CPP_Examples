///////////////////////////////////////////////////////////////////////////////
// ModuleDataAccessB.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleDataAccessB.h"
#include "TcIoServices.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModuleDataAccessB
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleDataAccessB
BEGIN_INTERFACE_MAP(CModuleDataAccessB)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CModuleDataAccessB)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP(CModuleDataAccessB)
IMPLEMENT_ITCADI(CModuleDataAccessB)
IMPLEMENT_ITCWATCHSOURCE(CModuleDataAccessB)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleDataAccessB 
BEGIN_SETOBJPARA_MAP(CModuleDataAccessB)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_DATAPTR(PID_ModuleDataAccessBDataIn, m_spDataIn)
	SETOBJPARA_DATAPTR(PID_ModuleDataAccessBDataOut, m_spDataOut)
///</AutoGeneratedContent>
	SETOBJPARA_VALUE(PID_Ctx_TaskSortOrder, (static_cast<STcCyclicEntry*>(m_spCyclicCaller))->sortOrder )
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleDataAccessB 
BEGIN_GETOBJPARA_MAP(CModuleDataAccessB)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
	GETOBJPARA_VALUE(PID_Ctx_TaskSortOrder, (static_cast<STcCyclicEntry*>(m_spCyclicCaller))->sortOrder )
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleDataAccessB
BEGIN_OBJPARAWATCH_MAP(CModuleDataAccessB)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleDataAccessB
BEGIN_OBJDATAAREA_MAP(CModuleDataAccessB)
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()

///////////////////////////////////////////////////////////////////////////////
CModuleDataAccessB::CModuleDataAccessB()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_Counter(0)
{
}

///////////////////////////////////////////////////////////////////////////////
CModuleDataAccessB::~CModuleDataAccessB() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleDataAccessB)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleDataAccessB::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleDataAccessB::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	// TODO: Add any additional initialization

	// Initialize data pointer
	hr = FAILED(hr) ? hr : InitDataPointer();

	// If following call is successful the CycleUpdate method will be called, 
	// eventually even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller();

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller();
		DeinitDataPointer();
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleDataAccessB::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	RemoveModuleFromCaller();
	DeinitDataPointer();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
// Free memory
HRESULT CModuleDataAccessB::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// Prepare to leave OP state
// Release data pointer
BOOL CModuleDataAccessB::TcTryToReleaseOpState()
{
	m_Trace.Log(tlVerbose, FENTERA);

	DeinitDataPointer();

	m_Trace.Log(tlVerbose, FLEAVEA);
	return TRUE;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModuleDataAccessB::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	++m_Counter;

	if (m_spDataIn != NULL && m_spDataOut != NULL)
	{
		m_spDataOut->BitOut2 = m_spDataIn->Bit2;
		m_spDataOut->ValueOut += m_spDataIn->ValueIn * m_Counter; 
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleDataAccessB::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleDataAccessB::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}


///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleDataAccessB::InitDataPointer()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	hr = FAILED(hr) ? hr : m_spDataIn.Init(m_spSrv);
	hr = FAILED(hr) ? hr : m_spDataOut.Init(m_spSrv);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleDataAccessB::DeinitDataPointer()
{
	m_Trace.Log(tlVerbose, FENTERA);

	m_spDataIn = NULL;
	m_spDataOut = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}
