///////////////////////////////////////////////////////////////////////////////
// ModuleDataProvider.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleDataProvider.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleDataProvider
BEGIN_INTERFACE_MAP(CModuleDataProvider)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcIoCyclic, ITcIoCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CModuleDataProvider)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleDataProvider)
IMPLEMENT_ITCADI(CModuleDataProvider)
IMPLEMENT_ITCWATCHSOURCE(CModuleDataProvider)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleDataProvider 
BEGIN_SETOBJPARA_MAP(CModuleDataProvider)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleDataProvider 
BEGIN_GETOBJPARA_MAP(CModuleDataProvider)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleDataProvider
BEGIN_OBJPARAWATCH_MAP(CModuleDataProvider)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleDataProvider
BEGIN_OBJDATAAREA_MAP(CModuleDataProvider)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(1, m_Input)
	OBJDATAAREA_VALUE(2, m_Output)
	OBJDATAAREA_VALUE(3, m_Data)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
// Constructor
CModuleDataProvider::CModuleDataProvider()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
	memset(&m_Data, 0, sizeof(m_Data));
	memset(&m_Input, 0, sizeof(m_Input)); 
	memset(&m_Output, 0, sizeof(m_Output)); 
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
CModuleDataProvider::~CModuleDataProvider() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleDataProvider)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleDataProvider::SetObjStatePS(PTComInitDataHdr pInitData)
{
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleDataProvider::SetObjStateSO()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	hr = FAILED(hr) ? hr : m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller);
	hr = FAILED(hr) ? hr : m_spCyclicCaller->AddIoDriver(m_spCyclicCaller, THIS_CAST(ITcIoCyclic));

	if (FAILED(hr))
	{
		SetObjStateOS();
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleDataProvider::SetObjStateOS()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);
	m_spCyclicCaller->RemoveIoDriver(m_spCyclicCaller);
	m_spCyclicCaller = NULL;
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleDataProvider::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcIoCyclic">
HRESULT CModuleDataProvider::InputUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, DWORD dwStateIn, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	memcpy(&m_Data.DataIn, &m_Input, sizeof(TInput));
	return hr;
}

HRESULT CModuleDataProvider::OutputUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, DWORD* pdwStateOut, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	memcpy(&m_Output, &m_Data.DataOut, sizeof(TOutput));
	return hr;
}
///</AutoGeneratedContent>
