///////////////////////////////////////////////////////////////////////////////
// TcSdoAccessModul.cpp
#include "TcPch.h"
#pragma hdrstop

#include "TcSdoAccessModul.h"
#include "TcSdoAccessModulAds.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CTcSdoAccessModul
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CTcSdoAccessModul
BEGIN_INTERFACE_MAP(CTcSdoAccessModul)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CTcSdoAccessModul)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CTcSdoAccessModul)
IMPLEMENT_ITCADI(CTcSdoAccessModul)
IMPLEMENT_ITCWATCHSOURCE(CTcSdoAccessModul)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CTcSdoAccessModul 
BEGIN_SETOBJPARA_MAP(CTcSdoAccessModul)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulDefaultAdsPort, m_DefaultAdsPort)
	SETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulCounter, m_Counter)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulVendorId, m_VendorId)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulBaudRate, m_BaudRate)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulCoEVendorIdIndex, m_CoEVendorIdIndex)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulCoEVendorIdSubIndex, m_CoEVendorIdSubIndex)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulCoEBaudRateIndex, m_CoEBaudRateIndex)
	SETOBJPARA_VALUE(PID_TcSdoAccessModulCoEBaudRateSubIndex, m_CoEBaudRateSubIndex)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CTcSdoAccessModul 
BEGIN_GETOBJPARA_MAP(CTcSdoAccessModul)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulDefaultAdsPort, m_DefaultAdsPort)
	GETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulCounter, m_Counter)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulVendorId, m_VendorId)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulBaudRate, m_BaudRate)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulCoEVendorIdIndex, m_CoEVendorIdIndex)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulCoEVendorIdSubIndex, m_CoEVendorIdSubIndex)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulCoEBaudRateIndex, m_CoEBaudRateIndex)
	GETOBJPARA_VALUE(PID_TcSdoAccessModulCoEBaudRateSubIndex, m_CoEBaudRateSubIndex)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
	GETOBJPARA_TYPE_CODE(PID_TcSdoAccessModulAdsPort, WORD, *p = AmsGetPort())
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CTcSdoAccessModul
BEGIN_OBJPARAWATCH_MAP(CTcSdoAccessModul)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_TcSdoAccessModulCounter, m_Counter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CTcSdoAccessModul
BEGIN_OBJDATAAREA_MAP(CTcSdoAccessModul)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(0, m_Inputs)
	OBJDATAAREA_VALUE(1, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CTcSdoAccessModul::CTcSdoAccessModul()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
	memset(&m_Counter, 0, sizeof(m_Counter));
	memset(&m_Inputs, 0, sizeof(m_Inputs)); 
	memset(&m_Outputs, 0, sizeof(m_Outputs)); 
}

///////////////////////////////////////////////////////////////////////////////
CTcSdoAccessModul::~CTcSdoAccessModul() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CTcSdoAccessModul)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CTcSdoAccessModul::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = SUCCEEDED(hr) ? InitAmsPort(m_spSrv, m_DefaultAdsPort) : hr;

	// cleanup on failure
	if (FAILED(hr))
	{
		ShutdownAmsPort();
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CTcSdoAccessModul::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// eventually even before method has been left.
	hr = AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CTcSdoAccessModul::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CTcSdoAccessModul::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	ShutdownAmsPort();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CTcSdoAccessModul::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// handle pending ADS indications and confirmations
	CheckOrders();

	// TODO: Additional evaluation of input from ADS indication or confirmations

	// TODO: Submit your ADS requests 
	ULONGLONG cnt = 0;
	if (SUCCEEDED(ipTask->GetCycleCounter(&cnt)))
	{
		if (cnt%100 == 0)
		{
			// Cyclic call only for explanation
			// CoE can be call during SAFEOP
			SubmitAdsCoEReadReq();
			SubmitAdsCoEWriteReq();
		}
	}

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CTcSdoAccessModul::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CTcSdoAccessModul::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CTcSdoAccessModul::SubmitAdsCoEReadReq()
{		
	AmsAddr amsAddr;						

	// TODO: Adjust EtherCAT Master NetId or map it via TMC
	memcpy(&amsAddr.netId, &m_Inputs.AmsAddress.netId, sizeof(m_Inputs.AmsAddress.netId));

	// TODO: Adjust EtherCAT Slave Address (ADS destination port) or map it via TMC
	amsAddr.port = m_Inputs.AmsAddress.port;

	DWORD	nOffset = (m_CoEVendorIdIndex << 16) | m_CoEVendorIdSubIndex;	// index = HIWORD(iOffs), subIndex = LOBYTE(LOWORD(iOffs))

	// Request the vendor Id from a EtherCAT Slave
	// ADSIGRP_CANOPEN_SDO passed as index group and
	// the index:subindex is passed as offset.
	// The result is delivered by a call to AdsReadCon and can 
	// be identified by the invoke id. 
	
	int nRes = 
		AdsReadReq
		(
			amsAddr, 
			invokeIdReadVendorIdByCoE, 
			ADSIGRP_CANOPEN_SDO,		
			nOffset,							
			sizeof(m_VendorId)
		);

	m_Trace.Log(tlVerbose, FENTERA);

	if (nRes != ADSERR_NOERR)
	{
		m_Trace.Log(tlError, FNAMEA "SubmitAdsCoEReadReq failed with error=0x%08x(%s)", nRes, AdsGetErrorText(nRes));
	}
	else
	{
		m_Trace.Log(tlInfo, FNAMEA "SubmitAdsCoEReadReq by oid=0x%08x and pid=0x%08x", m_objId.value, PID_TcSdoAccessModulAdsPort);
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CTcSdoAccessModul::AdsReadCon
(
	AmsAddr& rAddr,
	ULONG invokeId,
	ULONG nResult,
	ULONG cbLength,
	PVOID pData
)
{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, nResult=0x%08x, cbLength=%d, pData=0x%p",
		m_objId.value, invokeId, nResult, cbLength, pData);

	if (invokeId == invokeIdReadVendorIdByCoE)
	{
		if (nResult != ADSERR_NOERR)
		{
			m_Trace.Log(tlWarning, FNAMEA "invokeIdReadVendorIdByCoE failed with error=0x%x(%s)",
				nResult, AdsGetErrorText(nResult));
		}
		else if (cbLength == sizeof(m_VendorId))
		{
			m_VendorId = *static_cast<PULONG>(pData); 
			m_Trace.Log(tlInfo, FNAMEA "m_VendorId=0x%x", m_VendorId);
		}
	}
	else
	{
		__super::AdsReadWriteCon( rAddr, invokeId, nResult, cbLength, pData );
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

void CTcSdoAccessModul::SubmitAdsCoEWriteReq()
{		
	AmsAddr amsAddr;						

	// TODO: Adjust EtherCAT Master NetId or map it via TMC
	memcpy(&amsAddr.netId, &m_Inputs.AmsAddress.netId, sizeof(m_Inputs.AmsAddress.netId));

	// TODO: Adjust EtherCAT Slave Address (ADS destination port) or map it via TMC
	amsAddr.port = m_Inputs.AmsAddress.port;

	DWORD	nOffset = (m_CoEBaudRateIndex << 16) | m_CoEBaudRateSubIndex;	// index = HIWORD(iOffs), subIndex = LOBYTE(LOWORD(iOffs))

	// Request the vendor Id from a EtherCAT Slave
	// ADSIGRP_CANOPEN_SDO passed as index group and
	// the index:subindex is passed as offset.
	// The result is delivered by a call to AdsWriteCon and can 
	// be identified by the invoke id. 
	
	int nRes = 
		AdsWriteReq
		(
			amsAddr, 
			invokeIdWriteBaudRateByCoE, 
			ADSIGRP_CANOPEN_SDO,		
			nOffset,							
			sizeof(m_BaudRate),
			&m_BaudRate
		);

	m_Trace.Log(tlVerbose, FENTERA);

	if (nRes != ADSERR_NOERR)
	{
		m_Trace.Log(tlError, FNAMEA "SubmitAdsCoEWriteReq failed with error=0x%08x(%s)", nRes, AdsGetErrorText(nRes));
	}
	else
	{
		m_Trace.Log(tlInfo, FNAMEA "SubmitAdsCoEWriteReq by oid=0x%08x and pid=0x%08x", m_objId.value, PID_TcSdoAccessModulAdsPort);
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CTcSdoAccessModul::AdsWriteCon
(
	AmsAddr& rAddr,
	ULONG invokeId,
	ULONG nResult
)

{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, nResult=0x%08x",
		m_objId.value, invokeId, nResult);

	if (invokeId == invokeIdWriteBaudRateByCoE)
	{
		if (nResult != ADSERR_NOERR)
		{
			m_Trace.Log(tlWarning, FNAMEA "invokeIdWriteBaudRateByCoE failed with error=0x%x(%s)",
				nResult, AdsGetErrorText(nResult));
		}
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}
