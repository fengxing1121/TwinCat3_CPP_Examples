///////////////////////////////////////////////////////////////////////////////
// TcFileTestDrv.cpp
#include "TcPch.h"
#pragma hdrstop

#include "TcFileTestDrv.h"
//sample code
#include "TcFileAccessServices.h"
#include "TcTimeConversion.h"
#include "TcRtInterfaces.h"
//sample code end

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CTcFileTestDrv
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CTcFileTestDrv
BEGIN_INTERFACE_MAP(CTcFileTestDrv)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CTcFileTestDrv)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CTcFileTestDrv)
IMPLEMENT_ITCADI(CTcFileTestDrv)
IMPLEMENT_ITCWATCHSOURCE(CTcFileTestDrv)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CTcFileTestDrv 
BEGIN_SETOBJPARA_MAP(CTcFileTestDrv)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_TcFileTestDrvParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CTcFileTestDrv 
BEGIN_GETOBJPARA_MAP(CTcFileTestDrv)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_TcFileTestDrvParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CTcFileTestDrv
BEGIN_OBJPARAWATCH_MAP(CTcFileTestDrv)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CTcFileTestDrv
BEGIN_OBJDATAAREA_MAP(CTcFileTestDrv)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(0, m_Inputs)
	OBJDATAAREA_VALUE(1, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CTcFileTestDrv::CTcFileTestDrv()
	: m_nBuffer(8*1024)
	, m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
	memset(&m_Parameter, 0, sizeof(m_Parameter)); 
	memset(&m_Inputs, 0, sizeof(m_Inputs)); 
	memset(&m_Outputs, 0, sizeof(m_Outputs)); 

}

///////////////////////////////////////////////////////////////////////////////
CTcFileTestDrv::~CTcFileTestDrv() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CTcFileTestDrv)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CTcFileTestDrv::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	m_Trace.Log(tlVerbose, FLEAVEA "Entering PREOP to SAFEOP - hr=0x%08x", hr);

	//sample code 
	hr = m_spSrv->TcCreateInstance(CID_TcFileAccess, IID_ITcFileAccess, (PPVOID)(&m_spFileAccess)); 

	m_Trace.Log(tlVerbose, FLEAVEA "After creating TcCreateInstance ...", hr);
	if (SUCCEEDED(hr))
	{
		m_Trace.Log(tlVerbose, FLEAVEA "Created spFileAccess");
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		hr = spFileAccessObj->TcSetObjState(TCOM_STATE_PREOP, m_spSrv, pInitData); 
		if (SUCCEEDED(hr))
		{
			m_Trace.Log(tlVerbose, FLEAVEA "Starting with file demo...");
			m_pBuffer = new CHAR[m_nBuffer];
			PrintFileInfoToLog("%TC_TARGETPATH%DefaultConfig.xml"); 
			FileCopy("%TC_TARGETPATH%DefaultConfig.xml", "%TC_TARGETPATH%DefaultConfig.xml.bak");
			PrintFilesOfDir("%TC_RESOURCEPATH%*"); 

			m_Trace.Log(tlVerbose, FLEAVEA "....ending with file demo");
		}
	}
	//sample code end
	
	m_Trace.Log(tlVerbose, FLEAVEA "Leaving PREOP to SAFEOP - hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CTcFileTestDrv::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CTcFileTestDrv::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CTcFileTestDrv::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	//sample code 
	if (m_spFileAccess != NULL)
	{
		ITComObjectPtr spFileAccessObj = m_spFileAccess;
		spFileAccessObj->TcSetObjState(TCOM_STATE_INIT, m_spSrv, NULL); 
		spFileAccessObj = NULL;
		m_spFileAccess = NULL;
		safe_delete_a(m_pBuffer);
	}
	//sample code end

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CTcFileTestDrv::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// TODO: Replace the sample with your cyclic code
	m_counter+=m_Inputs.Value;
	m_Outputs.Value=m_counter;

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CTcFileTestDrv::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CTcFileTestDrv::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}


///////////////////////////////////////////////////////////////////////////////
// Sample code - helper methods

//Copies a file
VOID CTcFileTestDrv::FileCopy(PCCH szFileNameRead, PCCH szFileNameWrite)
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	ULONG diff = 0;
	ULONG diffTrace = 0;
	if (m_pBuffer)
	{
		TcFileHandle hFile = NULL;
		hr = m_spFileAccess->FileOpen(szFileNameRead, static_cast<TcFileAccessMode>(amBinary | amRead), &hFile);
		m_Trace.Log(tlVerbose,"FileOpen hFile ");
		if (SUCCEEDED(hr))
		{
			UINT nRead = 0;
			m_spFileAccess->FileRead(hFile, m_pBuffer, m_nBuffer, &nRead);
			TcFileHandle hFileBak = NULL;
			hr = m_spFileAccess->FileOpen(szFileNameWrite, static_cast<TcFileAccessMode>(amBinary | amWrite), &hFileBak);
			m_Trace.Log(tlVerbose,"FileOpen hFileBak");
			if (SUCCEEDED(hr))
			{
				UINT nWritten = 0;
				m_spFileAccess->FileWrite(hFileBak, m_pBuffer, nRead, &nWritten);
				m_Trace.Log(tlVerbose,"Wrote %d bytes", nWritten);
				m_spFileAccess->FileClose(hFileBak);
			}
			m_spFileAccess->FileClose(hFile);
		}
	}
	m_Trace.Log(tlVerbose, FLEAVEA);

}


//Prints all files of a directory to Trace()
VOID CTcFileTestDrv::PrintFilesOfDir(PCCH szDir)
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	TcFileFindHandle hFileFind = NULL;
	TcFileFindData FileFindData = {0};
	m_Trace.Log(tlAlways, "szDir: %hs FileFindFirst", szDir); 
	hr = m_spFileAccess->FileFindFirst(szDir, &FileFindData, &hFileFind); 
	if (SUCCEEDED(hr))
	{
		do
		{
			m_Trace.Log(tlAlways, "szDir: %s, szDirEntry: %s", szDir, FileFindData.cFileName); 
			hr = m_spFileAccess->FileFindNext(hFileFind, &FileFindData);
		} while (SUCCEEDED(hr));
		m_Trace.Log(tlVerbose, "szDir: %hs closing ...", szDir); 
		m_spFileAccess->FileFindClose(hFileFind);
		m_Trace.Log(tlVerbose, "szDir: %s closed", szDir); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA);


}

//Prints information like creation time etc to Trace()  
#define TIMESTAMPPARM(st) st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond
VOID CTcFileTestDrv::PrintFileInfoToLog(PCCH szFileName)
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	TcFileStatus FileStatus = {0};
	hr = m_spFileAccess->FileGetStatus(szFileName, &FileStatus);

	m_Trace.Log(tlVerbose, FLEAVEA "Entering Printing file info...");

	if (SUCCEEDED(hr))
	{
		SYSTEMTIME stCreateTime;
		SYSTEMTIME stModifiedTime;
		SYSTEMTIME stReadTime;

		m_Trace.Log(tlVerbose, FLEAVEA "Printing file info...");

		TcFileTimeToSystemTime(FileStatus.ulCreateTime, &stCreateTime); 
		TcFileTimeToSystemTime(FileStatus.ulModifiedTime, &stModifiedTime); 
		TcFileTimeToSystemTime(FileStatus.ulReadTime, &stReadTime); 

		m_Trace.Log(tlAlways, "PrintFileInfoToLog() Details of %s",szFileName);
		m_Trace.Log(tlAlways, "CreateTime=%04d/%02d/%02d %02d:%02d:%02d", TIMESTAMPPARM(stCreateTime) );
		m_Trace.Log(tlAlways, "ModifiedTime=%04d/%02d/%02d %02d:%02d:%02d", TIMESTAMPPARM(stModifiedTime) );
		m_Trace.Log(tlAlways, "ReadTime=%04d/%02d/%02d %02d:%02d:%02d", TIMESTAMPPARM(stReadTime) );
		m_Trace.Log(tlAlways, "Attribute=0x%08x", FileStatus.dwAttribute );
	
	} else {
		m_Trace.Log(tlAlways, "NOT Printing file info: hr=0x%08x", hr);
	}

	m_Trace.Log(tlVerbose, FLEAVEA);

}
