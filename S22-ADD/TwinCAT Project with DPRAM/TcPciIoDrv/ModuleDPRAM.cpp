///////////////////////////////////////////////////////////////////////////////
// ModuleDPRAM.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleDPRAM.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModuleDPRAM
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleDPRAM
BEGIN_INTERFACE_MAP(CModuleDPRAM)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CModuleDPRAM)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleDPRAM)
IMPLEMENT_ITCADI(CModuleDPRAM)
IMPLEMENT_ITCWATCHSOURCE(CModuleDPRAM)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleDPRAM 
BEGIN_SETOBJPARA_MAP(CModuleDPRAM)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_ModuleDPRAMParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_ModuleDPRAMPciDeviceAdi, m_spPciDeviceAdi)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleDPRAM 
BEGIN_GETOBJPARA_MAP(CModuleDPRAM)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_ModuleDPRAMParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_ModuleDPRAMPciDeviceAdi, m_spPciDeviceAdi)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleDPRAM
BEGIN_OBJPARAWATCH_MAP(CModuleDPRAM)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleDPRAM
BEGIN_OBJDATAAREA_MAP(CModuleDPRAM)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(0, m_Inputs)
	OBJDATAAREA_VALUE(1, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModuleDPRAM::CModuleDPRAM()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
	, m_pDataIn(NULL)
	, m_pDataOut(NULL)
{
	memset(&m_Parameter, 0, sizeof(m_Parameter)); 
	memset(&m_Inputs, 0, sizeof(m_Inputs)); 
	memset(&m_Outputs, 0, sizeof(m_Outputs)); 
}

///////////////////////////////////////////////////////////////////////////////
CModuleDPRAM::~CModuleDPRAM() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleDPRAM)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleDPRAM::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleDPRAM::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization
	hr = FAILED(hr) ? hr : AcquirePciDeviceAdi();

	// If following call is successful the CycleUpdate method will be called, 
	// eventually even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
		ReleasePciDeviceAdi();
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleDPRAM::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization
	ReleasePciDeviceAdi();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleDPRAM::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModuleDPRAM::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// get input from DPRAM
	if (m_pDataIn)
	{
		memcpy(&m_Inputs, m_pDataIn, sizeof(m_Inputs));
	}

	m_counter++;
	m_Outputs.Value = m_counter;

	// write data to DPRAM
	if (m_pDataOut)
	{
		memcpy(m_pDataOut, &m_Outputs, sizeof(m_Outputs));
	}

	// increment a counter
	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleDPRAM::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleDPRAM::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////
HRESULT CModuleDPRAM::AcquirePciDeviceAdi()
{
	HRESULT hr = S_OK;
	hr = m_spSrv->TcQuerySmartObjectInterface(m_spPciDeviceAdi);
	if (SUCCEEDED_DBG(hr))
	{
		hr = m_spPciDeviceAdi->GetImagePtr(sizeof(m_Outputs), m_Parameter.ByteOffsetInput, ADI_DPRAM, &m_pDataIn);
		if (SUCCEEDED_DBG(hr))
		{
			hr = m_spPciDeviceAdi->GetImagePtr(sizeof(m_Inputs), m_Parameter.ByteOffsetOutput, ADI_DPRAM, &m_pDataOut); 
		}
	}

	return hr;
}

///////////////////////////////////////////////////////////
VOID CModuleDPRAM::ReleasePciDeviceAdi()
{
	if (m_pDataIn)
	{
		m_spPciDeviceAdi->ReleaseImagePtr(m_pDataIn);
	}

	if (m_pDataOut)
	{
		m_spPciDeviceAdi->ReleaseImagePtr(m_pDataOut);
	}

	m_spPciDeviceAdi = NULL;
}

